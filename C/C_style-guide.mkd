The C Programming Style Guide
=============================

TL;DR
-----

Below is a simple program that demonstrates my C style (for more detail, read the rest of the guide):

```c
////////////////////////////////////////////////////////////////////////////////
// Comments

// This is simple C program that demonstrates my preferred C coding style.

////////////////////////////////////////////////////////////////////////////////
// Libraries

#include <stdio.h>

////////////////////////////////////////////////////////////////////////////////
// Symbolic Constants

#define FALSE 0
#define TRUE 1

////////////////////////////////////////////////////////////////////////////////
// Macros

#define PrintExpr( x ) ( printf( "PrintExpr:\n\t%s = [%d]\n", #x, ( x ) ) )

////////////////////////////////////////////////////////////////////////////////
// External Variables

int x = 1; // The first integer to add in the print_test() function.

////////////////////////////////////////////////////////////////////////////////
// Function Prototypes

void print_test( int y, int z );
/* Prints out x + y + z twice: 1) prints the sums of the input in the argument section of the printf() fucntion 2) does the same, but lets a macro do the "heavy" lifting instead.

   `x` = The first integer to be added (is external).
   `y` = The second integer to be added (parameterized).
   `z` = The third integer to be added (parameterized). */

////////////////////////////////////////////////////////////////////////////////
// Functions

void print_test( int y, int z )
{
	printf( "printf:\n\tx + y + z = [%d]\n", x + y + z );
	PrintExpr( x + y + z );
}

////////////////////////////////////////////////////////////////////////////////
int main()
{
	int * y, z; // I fully realize how silly it is to make y into a pointer here.

	/* Sets y */
	for( *y = 0; *y < 9; ++( *y ) );

	/* Sets z */
	while( z != 90 )
	{
		if( z < 80 )
		{
			z = z + 10;
		}
		else if( z >= 80 )
		{
			++z;
		}
		else if( z > 90 )
		{
			--z;
		}
	}

	/* Prints x + y + z */
	print_test( *y, z );

	return 0;
}
```

Functions
---------

*	My eyes are not so great, and I've found that spacing functions extensively is easier to read. E.G.

	```c
	printf( "hello\n" );
	```

*	I also like consistency, so I treat all functions the same way, even the control functions. E.G.

	```c
	if( x == 1 )
	```

*	Something I am unhappy about is how this style looks with nested parentheses. E.G.

	```c
	printf( "%d\n",  pow( 2, 3 ) );
	```

	It looks bad. It's also a pain to maintain, as it's easy to forget to space correctly. I think that the following looks much better:

	```c
	printf("%d\n", pow(2, 3));
	```

	However, like I said, my eyesight isn't very good, and I've found that it's easier to notice errors when there is plenty of spacing. It's ugly, sure, but utility wins out in this case. It's close, though. I could easily switch sometime in the future.

Control Functions
-----------------

*	Control function multi-liners should use curly braces, per the following:

	```c
	if( x == 1 )
	{
		printf( "x == 1, yay!\n" );
		printf( "I am so bored...!\n" );
	}
	```

	This allows the body of the control functions to be grouped logically, and without the control function call melting into the first line of the body. Also, this makes for an overall more consistent style.

*	The `else` function follows this convention, too. E.G.:

	```c
	if( x == 1 )
	{
		printf( "x == 1, yay!\n" );
		printf( "I am so bored...!\n" );
	}
	else if( x == 2 )
	{
		printf( "x == 2, wooooo!\n" );
		printf( "Yup, really bored...!\n" );
	}
	else
	{
		printf( "x != 1, booo...\n" );
		printf( "I am still bored...!\n" );
	}
	```

	The usual convention looks better (e.g. '} else {'). By comparison, my style is verbose & seems to to put undue separation between the if-true clause and the if-false clause. With regards to the former, my style is more consistent, so it's easier to debug; with regards to the latter, my style's `else if` doesn't bleed into into either if-true clauses it's sandwiched between.

*	`if`, `when`, etc. are all functions, and should be written as such, per the [functions section](https://github.com/DeadDork/style_guides/blob/master/C/C_style-guide.mkd#functions). (I know many people treat them stylistically as if they were different.)

*	Control functions one-liners should be treated as multi-liners. That is, here is the K & R style:

	```c
	if( x == 1 )
		printf( "x == 1, yay!\n" );
	```

	I have found that it is better to add curly braces, per the following:

	```c
	if( x == 1 )
	{
		printf( "x == 1, yay!\n" );
	}
	```

	I will readily admit that the former style looks better, but the latter is less error-prone when adding additional lines to the consequent clause. Again, utility wins against beauty.

	One exception is a loop function that just increments according to a condtion. In such cases, it should be a **real** one-liner:

	```c
	for( i = 0; s[ i ] != '\0' && s[ i ] != '\n'; ++i );
	```

Variable Declarations
---------------------

*	Pointers should be declared in the form of

	```c
	type * var;
	```

	For example:

	```c
	char * c;
	```

	I have a number of reasons for this:
	*	It can be read backwards, per the example above, as "c points to char", so is easy to remember.
	*	This form actually makes sense (compare it to the K & R style, which is ambiguous as all hell when it comes to dereferencing & pointers).
	*	The declaration of a pointer to type can easily be distinguished from dereferencing a variable.
	*	It lends itself to declaring multiple variables on the same line, e.g.:

		```c
		char a, b, * c, * d, ** f;
		```

Comments
--------

*	Sections are demarcated by 80 `/`'s, followed by a commented section name and a blank line. E.G.:

	```C
	////////////////////////////////////////////////////////////////////////////////
	// Comments

	// This is the first item in this section
	```

*	The `main` section is special, in that it only has the horizontal "bar". E.G.:

	```C
	////////////////////////////////////////////////////////////////////////////////
	int main()
	{
		printf( "Wut?!\n" );
	```

	This is because the `main` is very obvious.

*	Comments in the comments section should be separate by at least one line break. If they are sufficiently decoupled, two. Both should be commented out with a `//`.

	```C
	////////////////////////////////////////////////////////////////////////////////
	// Comments

	// This is a dummy comment section.

	// I feel like a dummy...
	```

*	Comments that only refer to one line should be placed to the right of the code, and commented out with `//`. E.G.:

	```c
	free( s ); // Always free manually allocated memory.
	```

*	Code block description comments should be encased by multi-line comment demarcators and placed at the head of the code block, e.g.:

	```c
	/* Prints 'Hello, world' */
	char s[] = "Hello, world\n";
	printf( "%s", s );
	```

*	Function prototypes--especially as they appear in header files--should have a thorough description of the function, encased in multi-line comment demarcators, right below the function prototype. E.G.:

	```c
	float add( float x, float y );
	/* Adds the two arguments together.

	`x` = The first value to be added.
	`y` = The second value to be added.

	Returns the sum of the two values. */
	```

*	In general, give variables descriptive comments at their declaration, e.g.:

	```c
	int main()
	{
		int c; // Character

		while( ( c = getchar() ) != EOF )
		{
			printf( "Character = [%c]\n", c );
		}

		return 0;
	}
	```

*	Non-obvious code-blocks should have a comment describing the action taking place, so that when you come back to it in 3 months, it doesn't look like Mandarin. E.G. same as the above example, but with a description:

	```c
	int main()
	{
		int c; // Character

		/* Reads one character at a time from STDIN and prints it to STDOUT with a little extra */
		while( ( c = getchar() ) != EOF )
		{
			printf( "Character = [%c]\n", c );
		}

		return 0;
	}
	```

Organization
------------

*	Small, single-file programs are organized accordingly:
	1.	Comments
	2.	Libraries
	3.	Symbolic Constants
	4.	External Variables
	5.	Macros
	6.	Structs
	7.	Functional Prototypes
	8.	Functions
	9.	Main

*	Large, multi-file programs are organized accordingly:
	*	Each file gets a *Comments* section.
	*	Header files get the Symbolic Constants, Macros, External Variables, and Functional Prototypes (and occasionally also any relevant *#include*'s, e.g. *stddef.h* when using funky types).
	*	Function files get Functions and their necessary *#include*'s.
	*	A main file gets the main function and any necessary *#include*'s.

Variable & Function Naming
--------------------------

I have yet to determine variable & function naming conventions. C convention generally runs towards minimal length (e.g. 's' to indicate a variable for a string), apparently because back in the good ol' days vars couldn't be longer than 8 bits or some such. Clearly we're past that, but the convention has stuck. Most times, this isn't a problem, but sometimes it makes code unreadable. Accordingly, I've toyed with going with the first letters of a short description separated by underscores (e.g. "dynamic string" = 'd\_s'), full descriptive names (e.g. 'dynamic\_string'), etc. I'm still undecided what I'm going to go with. I'll update this section when I develop some kind of preference.
