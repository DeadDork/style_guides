The C Programming Style Guide
=============================

TL;DR
-----

Below is a simple program that demonstrates my C style (for more detail, read the rest of the guide):

```c
////////////////////////////////////////////////////////////////////////////////
// Comments

// This is simple C program that demonstrates my preferred C coding style.

////////////////////////////////////////////////////////////////////////////////
// Libraries

#include <stdio.h>
#include <math.h>

////////////////////////////////////////////////////////////////////////////////
// Symbolic Constants

#define FALSE 0
#define TRUE 1

////////////////////////////////////////////////////////////////////////////////
// Macros

#define PrintExpr(x) (printf("PrintExpr:\n\t%s = [%d]\n", #x, (x)))

////////////////////////////////////////////////////////////////////////////////
// External Variables

int x = 1; // The first integer to add in the print_test function.
           // Because x is defined in--and at the top of--the same file where it
           // is used, there is no need to declare it, too.

////////////////////////////////////////////////////////////////////////////////
// Function Prototypes

// Prints out x + y + z twice:
//// 1) Prints the sums of the input in the argument section of printf().
//
//// 2) Does the same as (1), but lets a macro do the "heavy" lifting instead.
void print_test(int, int);

////////////////////////////////////////////////////////////////////////////////
// Functions

void print_test(int y, int z) {
	printf("printf:\n\tx + y + z = [%d]\n", x + y + z);
	PrintExpr(x + y + z);
}

////////////////////////////////////////////////////////////////////////////////
int main(void) {
	int * y, z;

	// Set y
	for (*y = 0; *y < 9; ++(*y));

	// Set z {{{
	while (z != 90) {
		if (z < 80)
			z = z + 10;
		else if (z >= 80)
			++z;
		else if (z > 90)
			--z;
	}
	// }}}

	// Print x + y + z
	print_test(*y, z);

	// Print the result of an arbitrary, complex expression
	printf("%f\n", 3 + 4 sin(fabs(x)) * (log(10) / pow(2, 3)));

	return 0;
}
```

Variables & Arrays
------------------

*	Declarations should have a space between the function declaration. E.G.

	```c
	char s[] = "Hello";
	```

*	Pointers should be declared in the form of

	```c
	type * var;
	```

	For example:

	```c
	char * c;
	```

	I have a number of reasons for this:
	*	It can be easily read backwards. For instance, the example above would be read as "`c` points to a char".
	*	This form makes it easy to distinguish pointer declaration from dereferencing (though it does still rely on context to distinguish declaration from multiplication, when I started out I found the latter less confusing).
	*	It lends itself to declaring multiple variables on the same line, e.g.:

		```c
		char a, b, * c, * d, ** f, *** g;
		```

*	Variables & arrays should either have an obviously descriptive name or have a comment describing their name. Either way, their purpose should be obvious. E.G.

	```c
	int e, numstr; // Element
	```

*	Variables & arrays of the same type should be declared on the same line--permitted that they and their respective comments fit in 80 spaces. If they don't, they should be split over multiple lines so that they do. E.G.

	```c
	////////////////////////////////////////////////////////////////////////////////
	int main(void) {
		int alpha, beta, gamma, delta; // Greek 'A', Greek 'B', Greek 'G', Greek 'D'
		int epsilon, zeta, eta; // Greek 'E', Greek 'Z', Greek 'E'
	```

*	Arrays don't have spaces in their element list. E.G.

	```c
	int nums[4]; // Numbers
	double dblsndbls[2][2]; // Doubles and doubles of doubles

	nums[0] = 0;
	nums[1] = 10;
	nums[2] = 20;
	nums[3] = 30;

	dblsndbls[0][0] = 0.0;
	dblsndbls[0][1] = 0.1;
	dblsndbls[1][0] = 1.0;
	dblsndbls[1][1] = 1.1;
	```

*	I use the following generic variable names:

	*	Generic void

		```c
		void * v;
		```

	*	Generic char

		```c
		char c;
		```

	*	Generic string

		```c
		char * s;
		//char s[maxstr];
		```

	*	Generic short

		```c
		short sh;
		```

	*	Generic integer

		```c
		int i;
		```

	*	Generic long

		```c
		long l;
		```

	*	Generic float

		```c
		float f;
		```

	*	Generic double

		```c
		double d;
		```

	*	Generic signed integer

		```c
		signed si;
		```

	*	Generic unsigned integer

		```c
		unsigned ui;
		```

	*	Generic temporary variable of any type (in this case, a char)

		```c
		char t;
		```

Functions
---------

*	After initially following IBM's spacey style, e.g.

	```c
	printf( "hello\n" );
	```

	I finally broke down after coding in it for a few weeks. Intellectually, I agree with it wholeheartedly, as it does solve a lot of style problems very neatly. However, in practice I find that it makes for hideous code. I much prefer a style very similar to K & R's tight style:

	*	All function aguments are tightly bound to the function name. This way, complex expressions containing functions with return values are easier to parse. Moreover, you get fewer style errors due to forgotten spaces. E.G.

		```c
		double x = 3 + 7 * (log(10) / log(2));
		```

	*	`while`, `for`, `if`, etc. are actually not functions, but rather statements. This distinction is emphasized with a space between their "arguments". E.G.

		```c
		if (episode == 20)
			printf("Hello, boy. Hahahahahahaha!!!\n"); // Why, yes, I *am* a big fan of Cowboy Bebop!
		```

*	Nested parentheses do not receive a space. This is hard on the eyes, sure, but a decent text editor with syntax highlighting overcomes this easily.

	```c
	printf("%d\n", pow(2, 3));
	```

*	Per K & R, empty lists in function declarations should be made explicit with *void*, e.g.:

	```c
	int main(void) {
		int x = 1337;

		return 0;
	}

Control Functions
-----------------

*	Again, control statements are not functions per se in C, which is indicated with a space between their "arguments", e.g.

	```c
	if (x > 1)
		printf("%f\n", 2 * 3 / log(8));
	}
	```

*	Multi-liners should use curly braces, per the following:

	```c
	if (x == 1) {
		printf("x == 1, yay!\n");
		printf("I am so bored...!\n");
	}
	```

	This way the indentation is more meaningful and funtions are tight.

*	The `else` statement follows this convention, too. E.G.:

	```c
	if (x == 1) {
		printf("x == 1, yay!\n");
		printf("I am so bored...!\n");
	} else if (x == 2) {
		printf("x == 2, wooooo!\n");
		printf("Yup, really bored...!\n");
	} else {
		printf("x != 1, booo...\n");
		printf("I am still bored...!\n");
	}
	```

	(My previous style was simply too verbose. Also, it separated the control function too much from it's body.)

*	Control function one-liners follow the K & R style. E.G.

	```c
	if (x == 1)
		printf("%d == 1, yay!\n", x);
	```

	The exception is the body-less loop. E.G. 

	```c
	for (i = 0; s[i] != '\0' && s[i] != '\n'; ++i);
	```

Comments
--------

*	Sections are demarcated by 80 `/`'s, followed by a commented section name and a blank line. E.G.:

	```C
	////////////////////////////////////////////////////////////////////////////////
	// Comments

	// This is the first item in this section
	```

*	I make an effort to not exceed 80 characters per line.

*	The `main` section is special, in that it only has the horizontal "bar". E.G.:

	```C
	////////////////////////////////////////////////////////////////////////////////
	int main(void) {
		printf("Wut?!\n");
	```

	This is because the `main` is very obvious.

*	Comments in the comments section should be separate by at least one line break. If they are sufficiently decoupled, two. Both should be commented out with a `//`.

	```C
	////////////////////////////////////////////////////////////////////////////////
	// Comments

	// This is a dummy comment section.
	// I feel like a dummy...

	// Syria is still in a state of civil war.
	```

*	Comments that only refer to one line should be placed to the right of the code, and commented out with `//`. E.G.:

	```c
	free(s); // Always free memory
	```

*	Code block description comments should be commented out with `//`, a description, a `{{{`, and at the end of the block a `// }}}`. E.G.:

	```c
	// Prints 'Hello, world' {{{
	char s[] = "Hello, world\n";
	printf("%s", s);
	// }}}
	```

*	Function prototypes--especially as they appear in header files--should have a stub description of the function, e.g.:

	```c
	// Adds the two floats together.
	float add(float, float);
	```

	N.B. In the previous style, I would write detailed descriptions. In practice, though, I found this to be a hugh PITA that was invariably unnecessary.

*	For overlong, single line comments, break the comment into multiple lines so that they fit within the 80 spaces. Each line after the first gets indented same as the first, then filled with spaces so that the `//` line up. E.G.

	```c
	////////////////////////////////////////////////////////////////////////////////
	int main (void) {
		int e; // Element

		for (e = 12; e < 24; ++e) { // 1 tabs
			printf("e = [%d]\n"); // 2 tabs: Nothing special about this comment,
			                      // 2 tabs + 23 spaces: except that it is long
			printf("e != [%d]\n", e - 3); // 2 tabs
		} // 1 tabs
	```

	// N.B. The above is a great demonstation of why you should have your editor write out tabs as 4 spaces instead of tab.

*	In general, these days I try to write as little commentary as possible. For one, it's a huge PITA. Second, I've come to believe that it's better to write code that is clear than code that is well documented.

Organization
------------

*	Small, single-file programs are organized accordingly:
	1.	Comments
	2.	Libraries
	3.	Symbolic Constants
	4.	Macros and enum's
	5.	Structs
	6.	External Variables
	7.	Function Prototypes
	8.	Functions
	9.	Main

*	Large, multi-file programs are organized as follows:
	*	Each file gets a *Comments* section.
	*	Header files get the Symbolic Constants, Macros, External Variables, and Functional Prototypes (and occasionally also any relevant *#include*'s, e.g. *stddef.h* when using funky types).
	*	Function files get Functions and their necessary *#include*'s.
	*	A main file gets the main function and any necessary *#include*'s.

	Since large projects are organized differently depending on the size and use, this is just a general guide (for instance, a function file may call on a function in another file, the function of which may call on yet another function in yet another file).

Variable & Function Naming
--------------------------

I have yet to determine variable & function naming conventions. C convention generally runs towards minimal length (e.g. 's' to indicate a variable for a string), apparently because back in the good ol' days vars couldn't be longer than 8 bits or some such. Clearly we're past that, but the convention has stuck. Most times, this isn't a problem, but sometimes it makes code unreadable. Accordingly, I've toyed with going with the first letters of a short description separated by underscores (e.g. "dynamic string" = 'd\_s'), full descriptive names (e.g. 'dynamic\_string'), etc. I'm still undecided what I'm going to go with. I'll update this section when I develop some kind of preference.
