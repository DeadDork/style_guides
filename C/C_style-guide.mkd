The C Programming Style Guide
=============================

TL;DR
-----

Below is some pseudo program code that demonstrates my C style (for more detail, read the rest of the guide):

	```c
	////////////////////////////////////////////////////////////////////////////////
	// Comments

	// This is simple C program that demonstrates my preferred C coding style.

	////////////////////////////////////////////////////////////////////////////////
	// Libraries

	#include <stdio.h>

	////////////////////////////////////////////////////////////////////////////////
	// Symbolic Constants

	#define FALSE 0
	#define TRUE 1

	////////////////////////////////////////////////////////////////////////////////
	// Macros

	#define PrintExpr( x ) ( printf( "PrintExpr:\n\t%s = [%d]\n", #x, ( x ) ) )

	////////////////////////////////////////////////////////////////////////////////
	// Function Prototypes

	void print_test( int x, int y );
	/* Prints out x + y twice: 1) adding the two in the arguments of a normal `printf` 2) letting a macro do the "heavy" lifting.

	   *x* = the first integer you are adding.
	   *y* = the second integer you are adding. */

	////////////////////////////////////////////////////////////////////////////////
	// Functions

	void print_test( int x, int y )
	{
		printf( "printf:\n\tx + y = [%d]\n", x + y );
		PrintExpr( x + y );
	}

	////////////////////////////////////////////////////////////////////////////////
	int main()
	{
		int *x, y; // I fully realize how silly it is to make x into a pointer.

		/* Sets x */
		for( *x = 0; *x < 10; ++( *x ) );

		/* Sets y */
		while( y != 90 )
		{
			if( y < 80 )
			{
				y = y + 10;
			}
			else if( y >= 80 )
			{
				++y;
			}
		}

		/* Prints x + y */
		print_test( *x, y );

		return 0;
	}
	```

Functions
---------

*	My eyes are not so great, and I've found that spacing functions extensively is easier to read. E.G.

	```c
	printf( "hello\n" );
	```

*	I also like consistency, so I treat all functions the same way, even the control functions. E.G.

	```c
	if( x == 1 )
	```

*	Something I am unhappy about is nested parentheses. E.G.

	```c
	printf( "%d\n",  pow( 2, 3 ) );
	```

	It looks bad. It's also a pain to maintain, as it's easy to forget to space correctly. I think that the following looks much better:

	```c
	printf("%d\n", pow(2, 3));
	```

	However, like I said, my eyesight isn't very good, and I've found that it's easier to notice errors when there is plenty of spacing. It's ugly, sure, but utility wins out in this case. It's close, though. I could easily switch sometime in the future.

Control Functions
-----------------

*	Control functions multi-liners should use curly braces something like the following:

	```c
	if( x == 1 )
	{
		printf( "x == 1, yay!\n" );
		printf( "I am so bored...!\n" );
	}
	```

	This allows the body of the control functions to be grouped logically, and without the control function call melting into the first line of the body. Also, this makes for an overall more consistent style.

*	The *else* function follows this convention, too. E.G.:

	```c
	if( x == 1 )
	{
		printf( "x == 1, yay!\n" );
		printf( "I am so bored...!\n" );
	}
	else
	{
		printf( "x != 1, booo...\n" );
		printf( "I am still bored...!\n" );
	}
	```

	Putting the *else* between the two curly braces (i.e. '} else {') seems to put undue separation between the if-true clause and the if-false clause. I'll admit that it does. However, I often use *else if*, in which case the condition suffers from bleed into both the true consequent block & the false consequent block--which is why I use the form above.

*	*if*, *when*, etc. are all functions, and should be written as such, per the __functions__ style guide. (I know many people treat them stylistically as if they were different.)

*	Control functions one-liners should be treated as multi-liners. That is, here is the K & R style:

	```c
	if( x == 1 )
		printf( "x == 1, yay!\n" );
	```

	I have found that it is better to add curly braces, per the following:

	```c
	if( x == 1 )
	{
		printf( "x == 1, yay!\n" );
	}
	```

	I will readily admit that the former style looks better, but I've found that the latter is less error-prone when adding further lines to the consequent clause. Again, utility wins against beauty!

	One exception is a loop function that just increments according to a condtion. In such cases, it should be a **real** one-liner:

	```c
	for( i = 0; s[ i ] != '\0' && s[ i ] != '\n'; ++i );
	```

Variable Declarations
---------------------

*	Pointers should be declared in the form of

	```c
	type *var;
	```

	For example:

	```c
	char *c;
	```

	This is to make it so that several pointer variable can be declared in one line. Even though I believe that the 'type* var' form makes more sense, it doesn't let you declare multiple pointer variables in a single line--and thus style is trumped by functionality yet again.

Comments
--------

*	There are 7 possible sections:
	1.	Comments
	2.	Libraries
	3.	Symbolic Constants
	4.	Macros
	5.	Function Prototypes
	6.	Functions
	7.	Main

*	Sections are demarcated by 80 /'s, followed by a commented section name and a blank line. E.G.:

	```C
	////////////////////////////////////////////////////////////////////////////////
	// Comments

	// This is the first item in this section
	```

*	The *main* section is special, in that it only has the horizontal "bar". E.G.:

	```C
	////////////////////////////////////////////////////////////////////////////////
	int main()
	{
		printf( "Wut?!\n" );
	```

*	Comments in the comments section should be separate by at least one line break. If they are sufficiently decoupled, two. Both should be commented out with a //.

	```C
	////////////////////////////////////////////////////////////////////////////////
	// Comments

	// This is a dummy comment section.

	// I feel like a dummy...
	```

*	Comments that only refer to one line should be placed to the right of the code, and commented out with //. E.G.:

	```c
	free( s ); // I'm not sure that this is necessary to do for a program that's not looping.
	```

*	Code block description comments should be encased by multi-line comment demarcators, e.g.:

	```c
	/* Prints 'Hello, world' */
	char s[] = "Hello, world\n";
	printf( "%s\n", s );
	```

*	Function prototypes--especially as they appear in header files--should have a thorough description of the function, encased in multi-line comment demarcators, right below the function prototype. E.G.:

	```c
	void reprint( char *s, int i )
	/* Prints a string three times.

	   *s* = A pointer to a string.
	   *i* = The number of time to print. */
	```

Organization
------------

*	Small, single-file programs are organized accordingly:
	1.	Comments
	2.	Libraries
	3.	Symbolic Constants
	4.	Macros
	5.	Functional Prototypes
	6.	Functions
	7.	Main

*	Large, multi-file programs are organized accordingly:
	*	Each file gets a *Comments* section.
	*	Header files get the Symbolic Constants, Macros, and Functional Prototypes (and occasionally also any relevant *#include*'s).
	*	Function files get Functions and any *#include*'s.
	*	A main file gets the main function and any relevant *#include*'s.

Variable & Function Naming
--------------------------

Naming conventions have yet to be determined. C convention generally runs towards minimal length (e.g. 's' to indicate a char pointer to a string). I've toyed with going with the first letters of a short description separated by underscores (e.g. "dynamic string" = `d_s`). At other times, I've fallen back on the C convention. I'll update this section when I've sorted out my own position.
