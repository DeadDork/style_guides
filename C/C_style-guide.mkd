The C Programming Style Guide
=============================

TL;DR
-----

Below is a simple program that demonstrates my C style (for more detail, read the rest of the guide):

```c
////////////////////////////////////////////////////////////////////////////////
// Comments

// This is simple C program that demonstrates my preferred C coding style.

////////////////////////////////////////////////////////////////////////////////
// Libraries

#include <stdio.h>
#include <math.h>

////////////////////////////////////////////////////////////////////////////////
// Symbolic Constants

#define FALSE 0
#define TRUE 1

////////////////////////////////////////////////////////////////////////////////
// Macros

#define PrintExpr(x) (printf("PrintExpr:\n\t%s = [%d]\n", #x, (x)))

////////////////////////////////////////////////////////////////////////////////
// External Variables

int x = 1; // The first integer to add in the print_test function.

////////////////////////////////////////////////////////////////////////////////
// Function Prototypes

// Prints out x + y + z twice:
//// 1) Prints the sums of the input in the argument section of printf().
//
//// 2) Does the same as (1), but lets a macro do the "heavy" lifting instead.
void print_test(int, int);

////////////////////////////////////////////////////////////////////////////////
// Functions

void print_test(int y, int z) {
	printf("printf:\n\tx + y + z = [%d]\n", x + y + z);
	PrintExpr(x + y + z);
}

////////////////////////////////////////////////////////////////////////////////
int main(void) {
	int *y, z;

	// Sets y & z {{{
	// Set y
	for (*y = 0; *y < 9; ++(*y));

	// Set z
	while (z != 90) {
		if (z < 80)
			z = z + 10;
		else if (z >= 80)
			++z;
		else if (z > 90)
			--z;
	}
	// }}}

	// Print x + y + z
	print_test(*y, z);

	// Print the result of an arbitrary, complex expression
	printf("%f\n", 3 + 4 sin(fabs(x)) * (log(10) / pow(2, 3)));

	return 0;
}
```

Variables & Arrays
------------------

*	Declarations & definitions should be spacey, e.g.

	```c
	char s[] = "Hello";
	```

*	Pointers follow convention, i.e.

	```c
	type *var;
	```

	For example:

	```c
	char *c;
	```

	(While this did confuse me starting out, as I had issues decoupling dereferencing a pointer and declaring it, when I began referencing man pages heavily, the congnitive headache was no longer worth a style difference.)

*	Variables & arrays should be named well. A good name is worth 10x its length in good documentation, e.g.

	```c
	char string[3];
	int element = 0;

	string[element++] = 'h';
	string[element++] = 'i';
	string[element] = '\0';
	```

*	Variables & arrays of the same type should be declared on the same line--permitted that they and any of their respective comments fit inside 80 spaces. If they don't, they should be split over multiple lines so that they do, e.g.

	```c
	////////////////////////////////////////////////////////////////////////////////
	int main(void) {
		int alpha, beta, gamma, delta; // Greek 'A', Greek 'B', Greek 'G', Greek 'D'
		int epsilon, zeta, eta; // Greek 'E', Greek 'Z', Greek 'E'
	```

*	Arrays don't have spaces in their element list, e.g.

	```c
	int nums[4]; // Numbers
	double dblsndbls[2][2]; // Doubles and doubles of doubles

	nums[0] = 0;
	nums[1] = 10;
	nums[2] = 20;
	nums[3] = 30;

	dblsndbls[0][0] = 0.0;
	dblsndbls[0][1] = 0.1;
	dblsndbls[1][0] = 1.0;
	dblsndbls[1][1] = 1.1;
	```

*	Ideally, variables should be named well. However, if using an obvious, throwaway variable, generic variables should use the following convention:

	*	Generic void

		```c
		void *v;
		```

	*	Generic char

		```c
		char c;
		```

	*	Generic string

		```c
		char *s;
		//char s[100];
		```

	*	Generic short

		```c
		short sh;
		```

	*	Generic integer

		```c
		int i;
		```

	*	Generic long

		```c
		long lo;
		```

	*	Generic float

		```c
		float f;
		```

	*	Generic double

		```c
		double d;
		```

	*	Generic signed integer

		```c
		signed si;
		```

	*	Generic unsigned integer

		```c
		unsigned ui;
		```

	*	Generic temporary variable of any type (in this case, a char)

		```c
		char t;
		```

	*	If I need two or more generic variables of the same type, I number the variables, e.g.

		``c
		char c1, c2;
		int i1, i2, i3;
		```

Functions
---------

*	All function aguments are tightly bound to the function name. This way, complex expressions containing functions with return values are easier to parse. Moreover, you get fewer style errors due to forgotten spaces, e.g.

	```c
	double x = 3 + 7 * (log(10) / log(2));
	```

*	`while`, `for`, `if`, etc. are statements, not functions. This distinction is emphasized with a space and their test argument, e.g.

	```c
	if (episode == 20)
		printf("Hello, boy. Hahahahahahaha!!!\n"); // Why, yes, I *am* a big fan of Cowboy Bebop!
	```

*	Nested parentheses do not receive a space.

	```c
	printf("%d\n", pow(2, 3));
	```

*	Per K & R, empty lists in function declarations should be made explicit with *void*, e.g.:

	```c
	int main(void) {
		int x = 1337;

		return 0;
	}

Control Functions
-----------------

*	Again, control functions receive a space, e.g.

	```c
	if (x > 1)
		printf("%f\n", 2 * 3 / log(8));
	}
	```

*	Multi-liners should be braced on the same line, e.g.

	```c
	if (x == 1) {
		printf("x == 1, yay!\n");
		printf("I am so bored...!\n");
	}
	```

*	The `else` statement follows this convention, too, e.g.

	```c
	if (x == 1) {
		printf("x == 1, yay!\n");
		printf("I am so bored...!\n");
	} else if (x == 2) {
		printf("x == 2, wooooo!\n");
		printf("Yup, really bored...!\n");
	} else {
		printf("x != 1, booo...\n");
		printf("I am still bored...!\n");
	}
	```

*	Control function one-liners follow the K & R style, e.g.

	```c
	if (x == 1)
		printf("%d == 1, yay!\n", x);
	```

	The exception is the body-less loop. E.G. 

	```c
	for (i = 0; s[i] != '\0' && s[i] != '\n'; ++i);
	```

Comments
--------

*	Sections are demarcated by 80 `/`'s, followed by a commented section name and a blank line. E.G.:

	```C
	////////////////////////////////////////////////////////////////////////////////
	// Comments

	// This is the first item in this section
	```

*	I make an effort to not exceed 80 characters per line (this is not always possible).

*	The `main` section is special, in that it only has the horizontal "bar". E.G.:

	```C
	////////////////////////////////////////////////////////////////////////////////
	int main(void) {
		printf("Wut?!\n");
	```

*	Comments in the comments section should be separate by at least one line break. If they are sufficiently decoupled, two. Both should be commented out with a `//`.

	```C
	////////////////////////////////////////////////////////////////////////////////
	// Comments

	// This is a dummy comment section.
	// I feel like a dummy...

	// Syria is still in a state of civil war.
	```

*	Comments that only refer to one line should be placed to the right of the code, and commented out with `//`. E.G.:

	```c
	free(s); // Always free memory
	```

*	Comments that refer to a whole block of code go above the code block.

	```c
	// Prints 'Hello, world'
	char s[] = "Hello, world\n";
	printf("%s", s);
	```

*	Comments that refer to several blocks of code go at the top of the block set, and are encapsulated, e.g.

	```c
	// A series of obfuscated prints {{{
	// Prints out "hi"
	printf("%c%c\n", 104, 105);

	// Prints out "bye"
	printf("%c%c%c\n", 98, 121, 101);
	// }}}
	```

*	Care should be taken to name functions informatively. Sometimes this isn't feasible, though, in which case a short description should be added above the function prototype, e.g.

	```c
	// Adds the two floats together.
	float add(float, float);
	```

*	For overlong, single line comments, break the comment into multiple lines so that they fit within the 80 spaces. Each line after the first gets indented same as the first, then filled with spaces so that the `//` line up. E.G.

	```c
	////////////////////////////////////////////////////////////////////////////////
	int main (void) {
		int e; // Element

		for (e = 12; e < 24; ++e) { // 1 tabs
			printf("e = [%d]\n"); // 2 tabs: nothing special about this comment,
			                      // 2 tabs + 23 spaces: special because it lines up
			printf("e != [%d]\n", e - 3); // 2 tabs
		} // 1 tabs
	```

	(N.B. The above is a great demonstation of why you should have your editor write out tabs as 4 spaces instead of tab.)

*	In general, these days I try to write as little commentary as possible. For one, it's a huge PITA. Second, I've come to believe that it's better to write code that is clear than code that is well documented.

Organization
------------

*	Small, single-file programs are organized accordingly:
	1.	Comments
	2.	Libraries
	3.	Symbolic Constants
	4.	Macros and enum's
	5.	Structs
	6.	External Variables
	7.	Function Prototypes
	8.	Functions
	9.	Main

*	While I don't have an organizational preference for large, multi-file programs, great effort should go into making their organization as sane, clear, simple, and obvious as possible.

Variable & Function Naming
--------------------------

I have concluded that the value of good names exceed the memory cost. Perhaps one day I will work on a microcontroller, etc. where the length of a name matters, in which case I will revert to a naming convention similar to K & R's, and even then only for that project. Except for that one exception, names should make the purpose of the object obvious and easy to parse.
