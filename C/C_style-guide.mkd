The C Programming Style Guide
=============================

TL;DR
-----

Below is a simple program that demonstrates my C style (for more detail, read the rest of the guide):

```c
////////////////////////////////////////////////////////////////////////////////
// Comments

// This is a simple C program that demonstrates my preferred C coding style.

////////////////////////////////////////////////////////////////////////////////
// Global Libraries

#include <stdio.h>
#include <math.h>

////////////////////////////////////////////////////////////////////////////////
// Global Symbolic Constants

#define HRNG 1834 // Human Random Number Generator value

////////////////////////////////////////////////////////////////////////////////
// Global Macros

#define PrintParameterValue(x, y, z) printf("%d + %d + %d = [%d]\n", (x), (y), (z), (x) + (y) + (z))

////////////////////////////////////////////////////////////////////////////////
// Global Types

typedef enum boolean {
	FALSE,
	TRUE
} Boolean;

////////////////////////////////////////////////////////////////////////////////
// Global Structs

typedef struct point {
	int axis_x;
	int axis_y;
} TwoDimension;

////////////////////////////////////////////////////////////////////////////////
// Global Functions

// Prints out the expression & the value of the expression:
//// 1) Uses printf()
//
//// 2) Uses PrintParamenterValue().
void print_test(int, int);

////////////////////////////////////////////////////////////////////////////////
// Code

int main(void) {
	int *y, z;

	// Sets y & z {{{
	// Set y
	for (*y = 0; *y < 9; ++(*y));

	// Set z
	while (z != 90) {
		if (z < 80)
			z = z + 10;
		else if (z >= 80)
			++z;
		else if (z > 90)
			--z;
	}
	// }}}

	// Print x + y + z, where x is an external variable
	print_test(*y, z);

	// Print the result of an arbitrary, complex expression
	printf("%f\n", 3 + 4 * sin(fabs(HRNG)) * (log(10) / pow(2, 3)));

	// Does--or doesn't--print, depending on the default value
	Boolean truth_value;
	if (truth_value)
		printf("Looks like the default is TRUE!\n");
	else
		printf("Looks like the default is FALSE!\n");

	// Prints the value of a point
	TwoDimension point;
	printf("Point:\n\tpoint.axis_x = %d\n\tpoint.axis_y = %d\n", point.axis_x, point.axis_y);

	return 0;
}

int x = 1; // The first integer to add in the print_test function.
void print_test(int y, int z) {
	printf("%d + %d + %d = [%d]\n", x, y, z, x + y + z);
	PrintParameterValue(x, y, z);
}
```

Variables & Arrays
------------------

*	Declarations & definitions should be spacey, e.g.

	```c
	char string[] = "Hello";
	```

*	Pointers follow convention, i.e.

	```c
	type *variable;
	```

	For example

	```c
	char *character;
	```

	(This form can be confusing given that a declaration of a pointer uses a `\*` as well as the unary operator dereferencing a pointer. This confusion can be cleared up if one thinks of the declaration as being to a generic pointer that if dereferenced accesses an object of the type in the declaration.)

*	Variables & arrays should be named well. A good name is worth 10x its length in good documentation, e.g.

	```c
	char string[3];
	int element = 0;

	string[element++] = 'h';
	string[element++] = 'i';
	string[element] = '\0';
	```

*	A name is a category, and complex names can be created by affixing more categories with an `\_`. The idea is to move from general to specific, e.g.

	```c
	int line, line_count, line_count_max = 17;
	```

*	Don't abbreviate names.

	The exception to this are math variables. Oftentimes math functions can be so abstract no good descriptive name can be used, in which case a letter will do, e.g.

	```c
	int x, y;

	x = sin(tan(y) - 17);
	```

*	Variables & arrays of the same type should be declared on the same line--permitted that they and any of their respective comments fit inside 80 spaces. If they don't, they should be split over multiple lines so that they do, e.g.

	```c
	int main(void) {
		int alpha, beta, gamma, delta, epsilon; // Greek 'A', 'B', 'G', 'D', 'E', 
		int zeta, eta;                          // 'Z', 'E'
	```

*	Arrays don't have spaces in their element list, e.g.

	```c
	int integer_array[4]; // Numbers
	double double_array[2][2];

	integer_array[0] = 0;
	integer_array[1] = 10;
	integer_array[2] = 20;
	integer_array[3] = 30;

	double_array[0][0] = 0.0;
	double_array[0][1] = 0.1;
	double_array[1][0] = 1.0;
	double_array[1][1] = 1.1;
	```

Macros
------

*	Macro names follow the same rules used for variable names, with the exceptions that the first letter of descriptive words in the name is capitalized and no `\_` is used, e.g.

	```c
	#define GenericSwap(type, source, target) {\\
		(type) place_holder = source;\\
		target = source;\\
		source = place_holder;\\
	}
	```

Functions
---------

*	All function aguments are tightly bound to the function name. This way, complex expressions containing functions with return values are easier to parse. Moreover, you get fewer style errors due to forgotten spaces, e.g.

	```c
	double x = 3 + 7 * (log(10) / log(2));
	```

*	`while`, `for`, `if`, etc. are statements, not functions. This distinction is emphasized with a space and their test argument, e.g.

	```c
	if (episode == 20 && cowboy_bebop_fan)
		printf("Hello, boy. Hahahahahahaha!!!\n");
	```

*	Nested parentheses do not receive a space, e.g.

	```c
	printf("%d\n", pow(2, 3));
	```

*	Per K & R, empty lists in function declarations should be made explicit with *void*, e.g.:

	```c
	int main(void) {
		int x = 1337;

		return 0;
	}

Control Functions
-----------------

*	Again, control functions receive a space, e.g.

	```c
	if (joke_on_me)
		printf("Joke's on you!\n");
	```

*	Multi-liners should be braced on the same line, e.g.

	```c
	if (x == 1) {
		printf("x == 1, yay!\n");
		printf("I am so bored...!\n");
	}
	```

*	The `else` statement follows this convention, too, e.g.

	```c
	if (x == 1) {
		printf("x == 1, yay!\n");
		printf("I am so bored...!\n");
	} else if (x == 2) {
		printf("x == 2, wooooo!\n");
		printf("Yup, really bored...!\n");
	} else {
		printf("x != 1, booo...\n");
		printf("I am still bored...!\n");
	}
	```

*	Control function one-liners follow the K & R style, e.g.

	```c
	if (x == 1)
		printf("%d == 1, yay!\n", x);
	```

	The exception is the body-less loop. E.G. 

	```c
	for (i = 0; s[i] != '\0' && s[i] != '\n'; ++i);
	```

Comments
--------

*	Sections are demarcated by 80 `/`'s, followed by a commented section name and a blank line. E.G.:

	```C
	////////////////////////////////////////////////////////////////////////////////
	// Comments

	// This is the first item in this section
	```

*	I make an effort to not exceed 80 characters per line (this is not always possible).

*	Comments in the comments section should be separate by at least one line break. If they are sufficiently decoupled, two. Both should be commented out with a `//`.

	```C
	////////////////////////////////////////////////////////////////////////////////
	// Comments

	// This is a dummy comment section.
	// I feel like a dummy...

	// Syria is still in a state of civil war.
	```

*	Comments that only refer to one line should be placed to the right of the code, and commented out with `//`. E.G.:

	```c
	free(s); // Always free memory
	```

*	Comments that refer to a whole block of code go above the code block.

	```c
	// Prints 'Hello, world'
	char *s = "Hello, world\n";
	printf("%s", s);
	```

*	Comments that refer to several blocks of code go at the top of the block set, and are encapsulated, e.g.

	```c
	// A series of obfuscated prints {{{
	// Prints out "hi"
	printf("%c%c\n", 104, 105);

	// Prints out "bye"
	printf("%c%c%c\n", 98, 121, 101);
	// }}}
	```

*	Functions should follow the same naming rules as variables, e.g.

	```c
	// Adds two floats together.
	float add_float(float, float);
	```

*	For overlong, single line comments, break the comment into multiple lines so that they fit within the 80 spaces. Each line after the first gets indented same as the first, then filled with spaces so that the `//` line up. E.G.

	```c
	////////////////////////////////////////////////////////////////////////////////
	int main (void) {
		int e; // Element

		for (e = 12; e < 24; ++e) { // 1 tabs
			printf("e = [%d]\n"); // 2 tabs: nothing special about this comment,
			                      // 2 tabs + 23 spaces: special because it lines up
			printf("e != [%d]\n", e - 3); // 2 tabs
		} // 1 tabs
	```

	(N.B. The above is a great demonstation of why you should have your editor write out tabs as 4 spaces instead of tab.)

*	In general, these days I try to write as little commentary as possible. For one, it's a huge PITA. Second, I've come to believe that it's better to write code that is clear than code that is well documented. This especially shows in my change of heart with regards to naming.

Organization
------------

*	C gives a programmer a lot of flexibility with regards to organization. Personally, I prefer breaking a program into a comments section, a global section, and a code section, i.e.
	1.	Comments
	2.	Global Libraries
	3.	Global Symbolic Constants
	4.	Global Macros
	5.	Global Types
	6.	Global Structs
	7.	Global Variables
	8.	Global Functions
	9.	Code

	Considering that C compiles top-to-bottom, the code section entails a lot of flexibility. Refer to the *TL;DR* for an example of an external variable that is declared after `main()` (that way, it is less vulnerable to certain bugs).
